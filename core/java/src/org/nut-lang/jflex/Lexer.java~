/* The following code was generated by JFlex 1.6.1 */

package jflex;

import parser.*;
import parser.Sym;
import parser.token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/org/nut-lang/jflex/lex.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\20\1\3\1\2\1\24\1\25\1\2\16\20\4\3\1\0\1\0"+
    "\1\11\1\1\1\17\1\0\1\64\1\12\2\0\1\62\1\21\1\60"+
    "\1\61\1\0\1\6\1\4\1\45\1\50\1\47\1\51\1\4\1\46"+
    "\1\4\1\44\1\4\1\54\1\0\1\56\1\55\1\57\1\0\1\71"+
    "\1\52\2\15\1\53\1\70\1\15\24\14\1\63\1\5\1\65\1\0"+
    "\1\17\1\0\1\34\1\7\2\15\1\32\1\33\1\43\1\14\1\37"+
    "\2\14\1\35\1\40\1\16\1\42\1\41\1\14\1\31\1\36\1\30"+
    "\1\10\1\14\4\14\1\66\1\0\1\67\1\0\6\20\1\26\32\20"+
    "\2\0\4\17\4\0\1\14\2\0\1\17\7\0\1\14\4\0\1\14"+
    "\5\0\27\14\1\0\37\14\1\0\u01ca\14\4\0\14\14\16\0\5\14"+
    "\7\0\1\14\1\0\1\14\21\0\160\17\5\14\1\0\2\14\2\0"+
    "\4\14\1\0\1\13\6\0\1\14\1\0\3\14\1\0\1\14\1\0"+
    "\24\14\1\0\123\14\1\0\213\14\1\0\5\17\2\0\236\14\10\13"+
    "\1\0\46\14\2\0\1\14\7\0\47\14\7\0\1\17\1\0\55\17"+
    "\1\0\1\17\1\0\2\17\1\0\2\17\1\0\1\17\10\0\33\14"+
    "\5\0\3\14\15\0\5\17\6\0\1\17\4\0\13\17\5\0\53\14"+
    "\25\17\12\23\4\0\2\14\1\17\143\14\1\0\1\14\10\17\1\0"+
    "\6\17\2\14\2\17\1\0\4\17\2\14\12\23\3\14\2\0\1\14"+
    "\17\0\1\17\1\14\1\17\36\14\33\17\2\0\131\14\13\17\1\14"+
    "\16\0\12\23\41\14\11\17\2\14\4\0\1\14\5\0\26\14\4\17"+
    "\1\14\11\17\1\14\3\17\1\14\5\17\22\0\31\14\3\17\104\0"+
    "\1\14\1\13\13\14\6\13\61\0\33\17\1\0\4\17\66\14\3\17"+
    "\1\14\22\17\1\14\7\17\12\14\2\17\2\0\12\23\1\0\7\14"+
    "\1\13\7\14\1\13\3\17\1\0\10\14\2\0\2\14\2\0\26\14"+
    "\1\0\7\14\1\0\1\14\3\0\4\14\2\0\1\17\1\14\7\17"+
    "\2\0\2\17\2\0\3\17\1\14\10\0\1\17\4\0\2\14\1\0"+
    "\3\14\2\17\2\0\12\23\2\14\2\17\7\0\1\17\5\0\3\17"+
    "\1\0\6\14\4\0\2\14\2\0\26\14\1\0\7\14\1\0\2\14"+
    "\1\0\2\14\1\0\2\14\2\0\1\17\1\0\5\17\4\0\2\17"+
    "\2\0\3\17\3\0\1\17\7\0\4\14\1\0\1\14\7\0\12\23"+
    "\2\17\3\14\1\17\13\0\3\17\1\0\11\14\1\0\3\14\1\0"+
    "\26\14\1\0\7\14\1\0\2\14\1\0\5\14\2\0\1\17\1\14"+
    "\10\17\1\0\3\17\1\0\3\17\2\0\1\14\17\0\2\14\2\17"+
    "\2\0\12\23\1\0\1\17\17\0\3\17\1\0\10\14\2\0\2\14"+
    "\2\0\26\14\1\0\7\14\1\0\2\14\1\0\5\14\2\0\1\17"+
    "\1\14\7\17\2\0\2\17\2\0\3\17\10\0\2\17\4\0\2\14"+
    "\1\0\3\14\2\17\2\0\12\23\1\0\1\14\20\0\1\17\1\14"+
    "\1\0\6\14\3\0\3\14\1\0\4\14\3\0\2\14\1\0\1\14"+
    "\1\0\2\14\3\0\2\14\3\0\3\14\3\0\14\14\4\0\5\17"+
    "\3\0\3\17\1\0\4\17\2\0\1\14\6\0\1\17\16\0\12\23"+
    "\11\0\1\17\7\0\3\17\1\0\10\14\1\0\3\14\1\0\27\14"+
    "\1\0\12\14\1\13\5\14\3\0\1\14\7\17\1\0\3\17\1\0"+
    "\4\17\7\0\2\17\1\0\2\14\6\0\2\14\2\17\2\0\12\23"+
    "\22\0\2\17\1\0\10\14\1\0\3\14\1\0\27\14\1\0\12\14"+
    "\1\0\5\14\2\0\1\17\1\14\7\17\1\0\3\17\1\0\4\17"+
    "\7\0\2\17\7\0\1\14\1\0\2\14\2\17\2\0\12\23\1\0"+
    "\2\14\17\0\2\17\1\0\10\14\1\0\3\14\1\0\51\14\2\0"+
    "\1\14\7\17\1\0\3\17\1\0\4\17\1\14\10\0\1\17\10\0"+
    "\2\14\2\17\2\0\12\23\12\0\6\14\2\0\2\17\1\0\22\14"+
    "\3\0\30\14\1\0\11\14\1\0\1\14\2\0\7\14\3\0\1\17"+
    "\4\0\6\17\1\0\1\17\1\0\10\17\6\0\12\22\2\0\2\17"+
    "\15\0\60\14\1\17\2\14\7\17\4\0\1\17\7\14\10\17\1\0"+
    "\12\23\47\0\2\14\1\0\1\14\2\0\2\14\1\0\1\14\2\0"+
    "\1\14\6\0\4\14\1\0\7\14\1\0\3\14\1\0\1\14\1\0"+
    "\1\14\2\0\2\14\1\0\4\14\1\17\2\14\6\17\1\0\2\17"+
    "\1\14\2\0\5\14\1\0\1\14\1\0\6\17\2\0\12\23\2\0"+
    "\4\14\40\0\1\14\27\0\2\17\6\0\12\23\13\0\1\17\1\0"+
    "\1\17\1\0\1\17\4\0\2\17\10\14\1\0\44\14\4\0\24\17"+
    "\1\0\2\17\5\14\13\17\1\0\44\17\11\0\1\17\71\0\53\14"+
    "\24\17\1\14\12\23\6\0\6\14\4\17\4\14\3\17\1\14\3\17"+
    "\2\14\7\17\3\14\4\17\15\14\14\17\1\14\1\17\12\23\4\17"+
    "\2\0\46\14\1\0\1\14\5\0\1\14\2\0\53\14\1\0\u014d\14"+
    "\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0\51\14"+
    "\1\0\4\14\2\0\41\14\1\0\4\14\2\0\7\14\1\0\1\14"+
    "\1\0\4\14\2\0\17\14\1\0\71\14\1\0\4\14\2\0\103\14"+
    "\2\0\3\17\40\0\20\14\20\0\125\14\14\0\u026c\14\2\0\21\14"+
    "\1\0\32\14\5\0\113\14\3\0\3\17\10\13\7\0\15\14\1\0"+
    "\4\14\3\17\13\0\22\14\3\17\13\0\22\14\2\17\14\0\15\14"+
    "\1\0\3\14\1\0\2\17\14\0\64\14\40\17\3\0\1\14\3\0"+
    "\1\17\1\14\1\17\2\0\12\23\41\0\3\17\2\0\12\23\6\0"+
    "\130\14\10\0\51\14\1\17\1\14\5\0\106\14\12\0\35\14\2\13"+
    "\1\0\14\17\4\0\14\17\12\0\12\23\36\14\2\0\5\14\13\0"+
    "\54\14\4\0\21\17\7\14\2\17\6\0\12\23\46\0\27\14\5\17"+
    "\4\0\65\14\12\17\1\0\35\17\2\0\1\17\12\23\6\0\12\23"+
    "\15\0\1\14\130\0\5\17\57\14\21\17\7\14\4\0\12\23\21\0"+
    "\11\17\14\0\3\17\36\14\15\17\2\14\12\23\54\14\16\17\14\0"+
    "\44\14\24\17\10\0\12\23\3\0\3\14\12\23\44\14\122\0\3\17"+
    "\1\0\25\17\4\14\1\17\4\14\3\17\2\14\11\0\300\14\47\17"+
    "\25\0\4\17\u0116\14\2\0\6\14\2\0\46\14\2\0\6\14\2\0"+
    "\10\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\37\14\2\0"+
    "\65\14\1\0\7\14\1\0\1\14\3\0\3\14\1\0\7\14\3\0"+
    "\4\14\2\0\6\14\4\0\15\14\5\0\3\14\1\0\7\14\16\0"+
    "\5\17\30\0\1\27\1\27\5\17\20\0\2\17\23\0\1\17\13\0"+
    "\5\17\5\0\6\17\1\0\1\14\15\0\1\14\20\0\15\14\3\0"+
    "\33\17\25\0\15\17\4\0\1\17\3\0\14\17\21\0\1\14\4\0"+
    "\1\14\2\0\12\14\1\0\1\14\3\0\5\14\6\0\1\14\1\0"+
    "\1\14\1\0\1\14\1\0\4\14\1\0\13\14\2\0\4\14\5\0"+
    "\5\14\4\0\1\14\21\0\43\17\2\14\4\17\u0a77\0\57\14\1\0"+
    "\57\14\1\0\205\14\6\0\4\14\3\17\2\14\14\0\46\14\1\0"+
    "\1\14\5\0\1\14\2\0\70\14\7\0\1\14\17\0\1\17\27\14"+
    "\11\0\7\14\1\0\7\14\1\0\7\14\1\0\7\14\1\0\7\14"+
    "\1\0\7\14\1\0\7\14\1\0\7\14\1\0\40\17\57\0\1\14"+
    "\u01d5\0\2\14\1\17\31\0\17\17\1\0\5\14\2\0\3\17\2\14"+
    "\4\0\126\14\2\0\2\17\2\0\3\14\1\0\132\14\1\0\4\14"+
    "\5\0\51\14\3\0\136\14\21\0\33\14\65\0\20\14\u0200\0\u19b6\14"+
    "\112\0\u51cd\14\63\0\u048d\14\103\0\56\14\2\0\u010d\14\3\0\20\14"+
    "\12\23\2\14\24\0\57\14\1\17\4\0\12\17\1\0\31\14\6\13"+
    "\1\0\1\17\106\14\14\17\45\0\11\14\2\0\147\14\2\0\4\14"+
    "\1\0\4\14\14\13\13\14\3\13\2\0\2\13\105\0\1\13\12\14"+
    "\1\17\3\14\1\17\4\14\1\17\27\14\5\17\20\0\1\17\7\0"+
    "\64\14\14\0\2\17\62\14\21\17\13\0\12\23\6\0\22\17\6\14"+
    "\3\0\1\14\4\0\12\23\34\14\10\17\2\0\27\14\15\17\14\0"+
    "\35\14\3\0\4\17\57\14\16\17\16\0\1\14\12\23\6\0\5\13"+
    "\1\0\12\13\12\22\5\13\1\0\51\14\16\17\11\0\3\14\1\17"+
    "\10\14\2\17\2\0\12\23\6\0\27\14\3\0\1\14\1\17\2\0"+
    "\2\13\60\14\1\17\1\14\3\17\2\14\2\17\5\14\2\17\1\14"+
    "\1\17\1\14\30\0\3\14\2\0\13\14\5\17\2\0\3\14\2\17"+
    "\12\0\6\14\2\0\6\14\2\0\6\14\11\0\7\14\1\0\7\14"+
    "\1\0\53\13\1\0\4\13\4\0\2\13\132\0\43\14\10\17\1\0"+
    "\2\17\2\0\12\23\6\0\u2ba4\14\14\0\27\14\4\0\61\14\u2104\0"+
    "\u016e\14\2\0\152\14\46\0\7\14\14\0\5\14\5\0\1\14\1\17"+
    "\12\14\1\0\15\14\1\0\5\14\1\0\1\14\1\0\2\14\1\0"+
    "\2\14\1\0\154\14\41\0\u016b\14\22\0\100\14\2\0\66\14\50\0"+
    "\14\14\1\17\3\0\20\17\20\0\7\17\14\0\2\17\30\0\3\17"+
    "\31\0\1\17\6\0\5\14\1\0\207\14\2\0\1\17\4\0\1\17"+
    "\13\0\12\23\7\0\32\14\4\0\1\17\1\0\32\14\13\0\131\14"+
    "\3\0\6\14\2\0\6\14\2\0\6\14\2\0\3\14\3\0\2\17"+
    "\3\0\2\17\22\0\3\17\4\0\14\14\1\0\32\14\1\0\23\14"+
    "\1\0\2\14\1\0\17\14\2\0\16\14\42\0\173\14\105\0\65\17"+
    "\210\0\1\17\202\0\35\14\3\0\61\14\57\0\37\14\1\13\20\0"+
    "\21\14\1\17\10\14\1\17\5\0\46\13\12\0\36\14\2\0\44\14"+
    "\4\0\10\14\1\0\5\17\52\0\236\14\2\0\12\23\126\0\50\13"+
    "\10\0\64\13\234\0\u0137\13\11\0\26\13\12\0\10\13\230\0\6\14"+
    "\2\0\1\14\1\0\54\14\1\0\2\14\3\0\1\14\2\0\27\14"+
    "\12\0\27\13\11\0\37\13\141\0\26\14\12\0\32\14\106\0\70\14"+
    "\6\0\2\14\100\0\1\14\3\17\1\0\2\17\5\0\4\17\4\14"+
    "\1\0\3\14\1\0\33\14\4\0\3\17\4\0\1\17\40\0\35\14"+
    "\3\0\35\13\43\0\10\13\1\0\34\13\33\0\66\14\12\0\26\14"+
    "\12\0\23\14\15\0\22\13\156\0\111\14\u03b7\0\3\17\65\14\17\17"+
    "\37\0\12\23\20\0\3\17\55\14\13\17\2\0\1\17\22\0\31\14"+
    "\7\0\12\23\6\0\3\17\44\14\16\17\1\0\12\23\20\0\43\13"+
    "\3\0\1\13\11\0\3\17\60\14\16\17\4\14\13\0\12\23\1\13"+
    "\45\0\22\13\1\0\31\13\204\0\57\13\21\0\12\22\13\0\10\13"+
    "\2\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13\1\0\5\13"+
    "\3\0\1\13\37\0\5\13\u011e\0\60\13\24\0\2\13\1\0\1\13"+
    "\10\0\12\22\246\0\57\13\121\0\60\13\24\0\1\13\13\0\12\22"+
    "\46\0\53\14\15\17\10\0\12\23\u01d6\0\100\13\12\22\25\0\1\13"+
    "\u01c0\0\71\13\u0507\0\u036f\14\52\13\147\0\143\17\u0b9d\0\u042f\14\u33d1\0"+
    "\u0239\14\7\0\37\13\1\0\12\22\146\0\36\13\22\0\60\13\20\0"+
    "\4\13\14\0\12\22\11\0\25\13\5\0\23\13\u0370\0\105\14\13\0"+
    "\1\14\56\17\20\0\4\17\15\14\u4060\0\2\14\u0bfe\0\153\13\5\0"+
    "\15\13\3\0\11\13\7\0\12\13\u14cb\0\5\17\3\0\26\17\2\0"+
    "\7\17\36\0\4\17\224\0\3\17\u01bb\0\125\14\1\0\107\14\1\0"+
    "\2\14\2\0\1\14\2\0\2\14\2\0\4\14\1\0\14\14\1\0"+
    "\1\14\1\0\7\14\1\0\101\14\1\0\4\14\2\0\10\14\1\0"+
    "\7\14\1\0\34\14\1\0\4\14\1\0\5\14\1\0\1\14\3\0"+
    "\7\14\1\0\u0154\14\2\0\31\14\1\0\31\14\1\0\37\14\1\0"+
    "\31\14\1\0\37\14\1\0\31\14\1\0\37\14\1\0\31\14\1\0"+
    "\37\14\1\0\31\14\1\0\10\14\2\0\62\23\u1000\0\305\13\u053b\0"+
    "\4\14\1\0\33\14\1\0\2\14\1\0\1\14\2\0\1\14\1\0"+
    "\12\14\1\0\4\14\1\0\1\14\1\0\1\14\6\0\1\14\4\0"+
    "\1\14\1\0\1\14\1\0\1\14\1\0\3\14\1\0\2\14\1\0"+
    "\1\14\2\0\1\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0"+
    "\1\14\1\0\2\14\1\0\1\14\2\0\4\14\1\0\7\14\1\0"+
    "\4\14\1\0\4\14\1\0\1\14\1\0\12\14\1\0\21\14\5\0"+
    "\3\14\1\0\5\14\1\0\21\14\u1144\0\ua6d7\14\51\0\u1035\14\13\0"+
    "\336\14\u3fe2\0\u021e\14\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\17\36\0\140\17\200\0\360\17\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\2\4\2\1\2\4\1\1"+
    "\1\5\1\6\1\4\1\7\6\4\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\2\1\1\16\1\17\1\20\1\21"+
    "\1\2\3\4\2\0\1\22\2\0\12\4\1\23\1\24"+
    "\1\25\2\4\2\0\14\4\2\0\1\26\1\27\1\4"+
    "\1\30\1\4\1\31\5\4\1\32\1\4\1\33\3\4"+
    "\2\0\1\34\1\4\1\35\1\36\1\37\1\4\1\40"+
    "\1\4\1\41\1\42\1\43\2\0\1\44\1\45\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\350\0\256\0\256\0\u027e\0\u020a"+
    "\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\72"+
    "\0\72\0\72\0\72\0\350\0\u044e\0\u0488\0\72\0\72"+
    "\0\72\0\72\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4"+
    "\0\256\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a"+
    "\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\256\0\256\0\256"+
    "\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c"+
    "\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c"+
    "\0\u0c76\0\u0cb0\0\u04fc\0\u04fc\0\u0cea\0\u04fc\0\u0d24\0\u04fc"+
    "\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u04fc\0\u0e80\0\u04fc"+
    "\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u04fc\0\u0fdc\0\u04fc"+
    "\0\u04fc\0\u04fc\0\u1016\0\u04fc\0\u1050\0\u04fc\0\u04fc\0\u04fc"+
    "\0\u108a\0\u10c4\0\u04fc\0\u04fc\0\u04fc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\2\2\1\6\1\7"+
    "\1\10\1\11\3\12\1\13\2\2\1\14\2\5\1\15"+
    "\1\4\1\15\1\16\1\17\1\12\1\20\1\21\1\12"+
    "\1\22\1\23\1\24\4\12\6\5\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\2\1\36"+
    "\1\37\1\40\1\41\1\20\1\42\4\0\1\2\15\0"+
    "\2\2\20\0\6\2\20\0\2\43\1\0\1\43\1\3"+
    "\15\43\2\3\20\43\6\3\20\43\72\0\2\2\1\0"+
    "\1\2\1\5\15\2\2\5\4\0\14\2\6\5\20\2"+
    "\4\0\1\12\2\0\2\44\3\0\5\44\1\0\1\2"+
    "\1\12\2\0\1\44\1\0\12\44\1\45\1\44\6\12"+
    "\2\44\14\0\1\44\5\0\1\12\2\0\2\44\3\0"+
    "\5\44\1\0\1\2\1\12\2\0\1\44\1\0\7\44"+
    "\1\46\4\44\6\12\2\44\14\0\1\44\1\0\2\47"+
    "\2\0\1\10\1\50\3\47\1\51\6\47\1\0\1\47"+
    "\2\10\3\0\15\47\6\10\20\47\2\52\2\0\1\11"+
    "\1\53\4\52\1\51\5\52\1\0\1\52\2\11\3\0"+
    "\15\52\6\11\20\52\4\0\1\12\2\0\2\44\3\0"+
    "\5\44\1\0\1\2\1\12\2\0\1\44\1\0\14\44"+
    "\6\12\2\44\14\0\1\44\5\0\1\12\2\0\1\44"+
    "\1\54\3\0\5\44\1\0\1\2\1\12\2\0\1\44"+
    "\1\0\14\44\6\12\2\44\14\0\1\44\5\0\1\12"+
    "\2\0\2\44\3\0\5\44\1\0\1\2\1\12\2\0"+
    "\1\44\1\0\1\44\1\55\12\44\6\12\2\44\14\0"+
    "\1\44\5\0\1\12\2\0\2\44\3\0\5\44\1\0"+
    "\1\2\1\12\2\0\1\44\1\0\4\44\1\56\1\57"+
    "\6\44\6\12\2\44\14\0\1\44\5\0\1\12\2\0"+
    "\2\44\3\0\5\44\1\0\1\2\1\12\2\0\1\44"+
    "\1\0\7\44\1\60\4\44\6\12\2\44\14\0\1\44"+
    "\5\0\1\12\2\0\2\44\3\0\5\44\1\0\1\2"+
    "\1\12\2\0\1\44\1\0\1\61\13\44\6\12\2\44"+
    "\14\0\1\44\5\0\1\12\2\0\2\44\3\0\2\44"+
    "\1\62\2\44\1\0\1\2\1\12\2\0\1\44\1\0"+
    "\10\44\1\63\3\44\6\12\2\44\14\0\1\44\5\0"+
    "\1\12\2\0\2\44\3\0\5\44\1\0\1\2\1\12"+
    "\2\0\1\44\1\0\5\44\1\64\6\44\6\12\2\44"+
    "\14\0\1\44\5\0\1\12\2\0\2\44\3\0\5\44"+
    "\1\0\1\2\1\12\2\0\1\44\1\0\4\44\1\65"+
    "\7\44\6\12\2\44\14\0\1\44\5\0\1\2\15\0"+
    "\2\2\20\0\6\2\3\0\1\66\20\0\1\2\15\0"+
    "\2\2\20\0\6\2\11\0\1\67\12\0\1\2\15\0"+
    "\2\2\20\0\6\2\11\0\1\70\6\0\2\43\1\0"+
    "\67\43\4\0\1\44\2\0\2\44\3\0\5\44\2\0"+
    "\1\44\2\0\1\44\1\0\24\44\14\0\1\44\5\0"+
    "\1\44\2\0\2\44\3\0\5\44\2\0\1\44\2\0"+
    "\1\44\1\0\12\44\1\71\11\44\14\0\1\44\5\0"+
    "\1\44\2\0\2\44\3\0\2\44\1\72\2\44\2\0"+
    "\1\44\2\0\1\44\1\0\24\44\14\0\1\44\1\0"+
    "\2\47\2\0\1\47\1\50\3\47\1\51\6\47\1\0"+
    "\3\47\3\0\43\47\5\0\3\47\1\73\5\0\1\47"+
    "\11\0\2\47\1\0\1\47\36\0\2\52\2\0\1\52"+
    "\1\53\4\52\1\51\5\52\1\0\3\52\3\0\43\52"+
    "\5\0\3\52\1\74\5\0\1\52\11\0\2\52\1\0"+
    "\1\52\42\0\1\44\2\0\2\44\3\0\5\44\2\0"+
    "\1\44\2\0\1\44\1\0\5\44\1\75\16\44\14\0"+
    "\1\44\5\0\1\44\2\0\1\44\1\76\3\0\5\44"+
    "\2\0\1\44\2\0\1\44\1\0\24\44\14\0\1\44"+
    "\5\0\1\44\2\0\2\44\3\0\5\44\2\0\1\44"+
    "\2\0\1\44\1\0\5\44\1\77\16\44\14\0\1\44"+
    "\5\0\1\44\2\0\2\44\3\0\5\44\2\0\1\44"+
    "\2\0\1\44\1\0\12\44\1\100\11\44\14\0\1\44"+
    "\5\0\1\44\2\0\2\44\3\0\5\44\2\0\1\44"+
    "\2\0\1\44\1\0\6\44\1\101\15\44\14\0\1\44"+
    "\5\0\1\44\2\0\2\44\3\0\5\44\2\0\1\44"+
    "\2\0\1\44\1\0\1\44\1\102\22\44\14\0\1\44"+
    "\5\0\1\44\2\0\2\44\3\0\5\44\2\0\1\44"+
    "\2\0\1\44\1\0\1\103\23\44\14\0\1\44\5\0"+
    "\1\44\2\0\2\44\3\0\5\44\2\0\1\44\2\0"+
    "\1\44\1\0\11\44\1\104\12\44\14\0\1\44\5\0"+
    "\1\44\2\0\2\44\3\0\5\44\2\0\1\44\2\0"+
    "\1\44\1\0\7\44\1\105\14\44\14\0\1\44\5\0"+
    "\1\44\2\0\2\44\3\0\5\44\2\0\1\44\2\0"+
    "\1\44\1\0\1\106\23\44\14\0\1\44\5\0\1\44"+
    "\2\0\2\44\3\0\5\44\2\0\1\44\2\0\1\44"+
    "\1\0\5\44\1\107\16\44\14\0\1\44\5\0\1\44"+
    "\2\0\2\44\3\0\5\44\2\0\1\44\2\0\1\44"+
    "\1\0\1\110\23\44\14\0\1\44\5\0\1\111\2\0"+
    "\1\111\5\0\1\111\14\0\3\111\7\0\10\111\14\0"+
    "\1\111\5\0\1\112\2\0\1\112\5\0\1\112\14\0"+
    "\3\112\7\0\10\112\14\0\1\112\5\0\1\44\2\0"+
    "\2\44\3\0\5\44\2\0\1\44\2\0\1\44\1\0"+
    "\5\44\1\113\16\44\14\0\1\44\5\0\1\44\2\0"+
    "\2\44\3\0\5\44\2\0\1\44\2\0\1\44\1\0"+
    "\2\44\1\114\21\44\14\0\1\44\5\0\1\44\2\0"+
    "\2\44\3\0\5\44\2\0\1\44\2\0\1\44\1\0"+
    "\6\44\1\76\15\44\14\0\1\44\5\0\1\44\2\0"+
    "\2\44\3\0\5\44\2\0\1\44\2\0\1\44\1\0"+
    "\4\44\1\115\17\44\14\0\1\44\5\0\1\44\2\0"+
    "\2\44\3\0\5\44\2\0\1\44\2\0\1\44\1\0"+
    "\1\116\23\44\14\0\1\44\5\0\1\44\2\0\2\44"+
    "\3\0\5\44\2\0\1\44\2\0\1\44\1\0\7\44"+
    "\1\117\14\44\14\0\1\44\5\0\1\44\2\0\2\44"+
    "\3\0\5\44\2\0\1\44\2\0\1\44\1\0\14\44"+
    "\1\120\1\121\1\122\1\123\4\44\14\0\1\44\5\0"+
    "\1\44\2\0\2\44\3\0\5\44\2\0\1\44\2\0"+
    "\1\44\1\0\12\44\1\124\11\44\14\0\1\44\5\0"+
    "\1\44\2\0\2\44\3\0\5\44\2\0\1\44\2\0"+
    "\1\44\1\0\4\44\1\125\17\44\14\0\1\44\5\0"+
    "\1\44\2\0\2\44\3\0\5\44\2\0\1\44\2\0"+
    "\1\44\1\0\4\44\1\126\17\44\14\0\1\44\5\0"+
    "\1\44\2\0\2\44\3\0\5\44\2\0\1\44\2\0"+
    "\1\44\1\0\2\44\1\127\21\44\14\0\1\44\5\0"+
    "\1\44\2\0\2\44\3\0\5\44\2\0\1\44\2\0"+
    "\1\44\1\0\14\44\1\130\1\131\1\132\1\133\4\44"+
    "\14\0\1\44\5\0\1\134\2\0\1\134\5\0\1\134"+
    "\14\0\3\134\7\0\10\134\14\0\1\134\5\0\1\135"+
    "\2\0\1\135\5\0\1\135\14\0\3\135\7\0\10\135"+
    "\14\0\1\135\5\0\1\44\2\0\2\44\3\0\5\44"+
    "\2\0\1\44\2\0\1\44\1\0\1\136\23\44\14\0"+
    "\1\44\5\0\1\44\2\0\2\44\3\0\2\44\1\137"+
    "\2\44\2\0\1\44\2\0\1\44\1\0\24\44\14\0"+
    "\1\44\5\0\1\44\2\0\2\44\3\0\5\44\2\0"+
    "\1\44\2\0\1\44\1\0\16\44\1\140\5\44\14\0"+
    "\1\44\5\0\1\44\2\0\2\44\3\0\5\44\2\0"+
    "\1\44\2\0\1\44\1\0\21\44\1\141\2\44\14\0"+
    "\1\44\5\0\1\44\2\0\2\44\3\0\5\44\2\0"+
    "\1\44\2\0\1\44\1\0\20\44\1\142\3\44\14\0"+
    "\1\44\5\0\1\44\2\0\2\44\3\0\5\44\2\0"+
    "\1\44\2\0\1\44\1\0\1\44\1\143\22\44\14\0"+
    "\1\44\5\0\1\44\2\0\2\44\3\0\5\44\2\0"+
    "\1\44\2\0\1\44\1\0\6\44\1\144\15\44\14\0"+
    "\1\44\5\0\1\44\2\0\2\44\3\0\5\44\2\0"+
    "\1\44\2\0\1\44\1\0\4\44\1\145\17\44\14\0"+
    "\1\44\5\0\1\44\2\0\2\44\3\0\5\44\2\0"+
    "\1\44\2\0\1\44\1\0\16\44\1\146\5\44\14\0"+
    "\1\44\5\0\1\44\2\0\2\44\3\0\5\44\2\0"+
    "\1\44\2\0\1\44\1\0\21\44\1\147\2\44\14\0"+
    "\1\44\5\0\1\44\2\0\2\44\3\0\5\44\2\0"+
    "\1\44\2\0\1\44\1\0\20\44\1\150\3\44\14\0"+
    "\1\44\5\0\1\151\2\0\1\151\5\0\1\151\14\0"+
    "\3\151\7\0\10\151\14\0\1\151\5\0\1\152\2\0"+
    "\1\152\5\0\1\152\14\0\3\152\7\0\10\152\14\0"+
    "\1\152\5\0\1\44\2\0\2\44\3\0\5\44\2\0"+
    "\1\44\2\0\1\44\1\0\13\44\1\153\10\44\14\0"+
    "\1\44\5\0\1\44\2\0\2\44\3\0\5\44\2\0"+
    "\1\44\2\0\1\44\1\0\1\154\23\44\14\0\1\44"+
    "\5\0\1\44\2\0\2\44\3\0\2\44\1\155\2\44"+
    "\2\0\1\44\2\0\1\44\1\0\24\44\14\0\1\44"+
    "\5\0\1\47\2\0\1\47\5\0\1\47\14\0\3\47"+
    "\7\0\10\47\14\0\1\47\5\0\1\52\2\0\1\52"+
    "\5\0\1\52\14\0\3\52\7\0\10\52\14\0\1\52"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4350];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\10\1\2\11\30\1\2\0\1\11"+
    "\2\0\12\1\3\11\2\1\2\0\14\1\2\0\21\1"+
    "\2\0\13\1\2\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException,   //Exception thrown
  Exception, L1Exception, L3Exception,  
 {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return new Token(Sym.EOF,yyline + 1,yycolumn +1 ) ;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new FloatToken(Sym.FLOAT_NUMBER, yyline + 1, yycolumn + 1, yytext());
            }
          case 39: break;
          case 2: 
            { 
            }
          case 40: break;
          case 3: 
            { return new NumberToken(Sym.NUMBER, yyline + 1, yycolumn + 1, yytext());
            }
          case 41: break;
          case 4: 
            { return new NameToken(Sym.NAME, yyline + 1, yycolumn + 1, yytext());
            }
          case 42: break;
          case 5: 
            { throw new L1Exception(yyline + 1,yycolumn +1) ;);
            }
          case 43: break;
          case 6: 
            { throw new L3Exception(yyline + 1,yycolumn +1 , yytext()) ;
            }
          case 44: break;
          case 7: 
            { return new Token(Sym.EXP_MARKER, yyline + 1, yycolumn +1);
            }
          case 45: break;
          case 8: 
            { return new Token(Sym.COLON, yyline + 1, yycolumn +1);
            }
          case 46: break;
          case 9: 
            { return new Token(Sym.EQUAL, yyline + 1, yycolumn +1);
            }
          case 47: break;
          case 10: 
            { return new Token(Sym.R_ANGLE_BRACE, yyline + 1, yycolumn +1);
            }
          case 48: break;
          case 11: 
            { return new Token(Sym.L_ANGLE_BRACE, yyline + 1, yycolumn +1);
            }
          case 49: break;
          case 12: 
            { return new Token(Sym.COMMA, yyline + 1, yycolumn +1);
            }
          case 50: break;
          case 13: 
            { return new Token(Sym.DASH, yyline + 1, yycolumn +1);
            }
          case 51: break;
          case 14: 
            { return new Token(Sym.R_SQ_BRACE, yyline + 1, yycolumn +1);
            }
          case 52: break;
          case 15: 
            { return new Token(Sym.L_BRACE, yyline + 1, yycolumn +1);
            }
          case 53: break;
          case 16: 
            { return new Token(Sym.R_BRACE, yyline + 1, yycolumn +1);
            }
          case 54: break;
          case 17: 
            { return new Token(Sym.ROOT, yyline + 1, yycolumn +1);
            }
          case 55: break;
          case 18: 
            { return new StringToken(Sym.STRING_VALUE, yyline + 1, yycolumn + 1, yytext().substring(1,yytext().length() - 1));
            }
          case 56: break;
          case 19: 
            { return new Token(Sym.COLON_EQUAL, yyline + 1, yycolumn +1);
            }
          case 57: break;
          case 20: 
            { return new Token(Sym.REF_ACCESS, yyline + 1, yycolumn +1);
            }
          case 58: break;
          case 21: 
            { return new Token(Sym.REF_DEFINE, yyline + 1, yycolumn +1);
            }
          case 59: break;
          case 22: 
            { return new Token(Sym.NULL, yyline + 1, yycolumn +1);
            }
          case 60: break;
          case 23: 
            { return new BooleanToken(Sym.BOOLEAN_VALUE, yyline + 1, yycolumn +1, yytext());
            }
          case 61: break;
          case 24: 
            { return new Token(Sym.LIST, yyline + 1, yycolumn +1);
            }
          case 62: break;
          case 25: 
            { return new Token(Sym.INT8, yyline + 1, yycolumn +1);
            }
          case 63: break;
          case 26: 
            { return new Token(Sym.DATA, yyline + 1, yycolumn +1);
            }
          case 64: break;
          case 27: 
            { return new Token(Sym.UINT8, yyline + 1, yycolumn +1);
            }
          case 65: break;
          case 28: 
            { return new Token(Sym.FLOAT, yyline + 1, yycolumn +1);
            }
          case 66: break;
          case 29: 
            { return new Token(Sym.INT16, yyline + 1, yycolumn +1);
            }
          case 67: break;
          case 30: 
            { return new Token(Sym.INT64, yyline + 1, yycolumn +1);
            }
          case 68: break;
          case 31: 
            { return new Token(Sym.INT32, yyline + 1, yycolumn +1);
            }
          case 69: break;
          case 32: 
            { return new Token(Sym.ALIAS, yyline + 1, yycolumn +1);
            }
          case 70: break;
          case 33: 
            { return new Token(Sym.UINT16, yyline + 1, yycolumn +1);
            }
          case 71: break;
          case 34: 
            { return new Token(Sym.UINT64, yyline + 1, yycolumn +1);
            }
          case 72: break;
          case 35: 
            { return new Token(Sym.UINT32, yyline + 1, yycolumn +1);
            }
          case 73: break;
          case 36: 
            { return new Token(Sym.STRING, yyline + 1, yycolumn +1);
            }
          case 74: break;
          case 37: 
            { return new Token(Sym.IMPORT, yyline + 1, yycolumn +1);
            }
          case 75: break;
          case 38: 
            { return new Token(Sym.BOOLEAN, yyline + 1, yycolumn +1);
            }
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
